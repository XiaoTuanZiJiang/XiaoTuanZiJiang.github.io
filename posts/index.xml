<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on XiaoTuanZiJiang</title>
    <link>https://xiaotuanzijiang.github.io/posts/</link>
    <description>Recent content in Posts on XiaoTuanZiJiang</description>
    <image>
      <url>https://xiaotuanzijiang.github.io/papermod-cover.png</url>
      <link>https://xiaotuanzijiang.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 15 Feb 2022 16:26:12 +0800</lastBuildDate><atom:link href="https://xiaotuanzijiang.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis面试题</title>
      <link>https://xiaotuanzijiang.github.io/posts/redis/</link>
      <pubDate>Tue, 15 Feb 2022 16:26:12 +0800</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/redis/</guid>
      <description>##Redis基本数据类型，应用场景 Redis的数据结构有:
 字符串（String）：存储简单的数据，例如缓存某个简单的字符串、JSON格式的字符串、Redis分布式锁的实现、实现计数器、Session共享、分布式ID 哈希表（Hash）：存储一些key-value，适合用来存储对象 列表（List）：Redis的列表通过命令的组合，可当作栈或队列来使用，或是缓存一下消息数据流 集合（Set）：和列表类似，可存储多个不相同的元素，集合可以进行交集、并集、差集操作 有序集合（HSet）：有序的Set  ##Redis的持久化策略
RDB  Redis DataBase 将某一时刻的内存快照（Snapshot）以二进制的方式写入磁盘。
 手动触发:
 save命令：使Redis处于阻塞状态，知道RDB持久化完成，才会响应其他客户端请求，所以在生产环境中谨慎使用 bgsave命令：fork出一个子进程执行持久化，主线程只在fork过程中又短暂的阻塞，子线程创建完成后，主线程才会响应其他客户端请求  自动触发:
 save m n: 在m秒内，如果有n个键发生改变，则自动触发持久化，通过调用bgsave执行，如果设置多个，只要满足其中一个就会触发一次。配置文件中有默认配置（可以注释掉） flushall: 用于清空Redis所有的数据库，flushdb清空当前Redis所在数据库，会清空RDB文件，同时会生成dump.rdb文件，内容为空  优点
1、Redis数据库将只包含一个dump.rdb文件，方便持久化 2、容灾性好，方便备份
3、性能最大化：fork子进程完成写操作，主进程继续处理请求。IO最大化：使用单独子线程进行持久化，主线程不会进行任何IO操作，保证了Redis的高性能
4、相对于数据集大时，比AOF的启动效率更高
缺点
1、数据安全性低，持久化存在时间间隔，如果持久化之间Redis宕机，会发生数据丢失
2、由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果数据集较大时，可能会导致服务器停止服务时间过长。占用cpu资源
 AOF  Append Only File 以日志的形式记录服务器所处理过的每一个写、删除操作，以文本的方式记录，打开文件可以看到详细的操作记录、调用操作系统命令进程刷盘
 1、所有的写命令都会追加到AOF缓冲中
2、AOF缓冲区根据对应的策略向硬盘进行同步操作
3、AOF文件会越来越大，需要定期对AOF文件进行重写，达到压缩的目的
4、当Redis重启时，可以加载AOF文件进行数据恢复
同步策略:
 每秒同步：异步完成，效率非常高，如果出现宕机现象，那么则会丢失这一秒钟之内修改的数据。 每修改同步：同步持久化，每次发生的数据变化都会被立即记录到磁盘中，最多丢失一条数据 不同步：有操作系统控制，可能会丢失较多数据  优点
1、数据安全
2、通过append模式写文件，即使服务器中途宕机也不会破坏已经存在的内容，可以通过redis-check-aof工具解决数据一致性问题
3、AOF机制的rewrite模式。定期对AOF文件进行重写，以达到压缩文件的目的
缺点
1、AOF文件比RDB文件大，且恢复速度慢
2、数据集大的时候，比RDB启动效率低
3、运行效率比RDB低</description>
    </item>
    
    <item>
      <title>Git提交代码时出现Everything up-to-date</title>
      <link>https://xiaotuanzijiang.github.io/posts/git%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/git%E9%97%AE%E9%A2%98/</guid>
      <description>1. 创建一个新的分支：  git branch newBranch
 2. 查看分支是否创建成功：  git branch
 3. 切换到新分区：  git checkout newBranch
 4. 把代码直接提到newBranch分支上,如果出现提示,直接执行：  git push &amp;ndash;set-upstream origin newBranch
 5. 切换回本想要提交代码的分区,把newBranch合并到 master分支上：  git checkout master
git merge newBranch
 6. 删除新分区：  git branch -D newBranch
 7. 重新提交一下代码：  git push
 </description>
    </item>
    
    <item>
      <title>UNTIL</title>
      <link>https://xiaotuanzijiang.github.io/posts/unitl/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/unitl/</guid>
      <description>前端 - Color - CSSLayout - CSSGridGenerator - Uigradients - FreeDownloads 后端 - Binary Tree - BinaryTreeVisuakuser - Data Structure Visualizations - MvnRepository - MavenRepository - 阿里巴巴开源镜像站 其他 - MarkDown编辑器 - Eclipse主题 - Pexels - CodeLf - Favicon - RegexLearn </description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://xiaotuanzijiang.github.io/posts/leetcode/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/leetcode/</guid>
      <description>LeetCode_每日一题 2.15-1380. 矩阵中的幸运数 难度：简单
 模拟
 class Solution { public List&amp;lt;Integer&amp;gt; luckyNumbers (int[][] matrix) { List&amp;lt;Integer&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;(); int m = matrix.length, n = matrix[0].length; int[] row = new int[m]; int[] col = new int[n]; for(int i = 0; i &amp;lt; m; i++){ row[i] = Integer.MAX_VALUE; for(int j = 0; j &amp;lt; n; j++){ row[i] = Math.min(matrix[i][j],row[i]); col[j] = Math.max(matrix[i][j],col[j]); } } for (int i = 0; i &amp;lt; m; i++) { for (int j = 0; j &amp;lt; n; j++) { if (matrix[i][j] == row[i] &amp;amp;&amp;amp; matrix[i][j] == col[j]) { ans.</description>
    </item>
    
  </channel>
</rss>
