[{"content":"1. 创建一个新的分支：  git branch newBranch\n 2. 查看分支是否创建成功：  git branch\n 3. 切换到新分区：  git checkout newBranch\n 4. 把代码直接提到newBranch分支上,如果出现提示,直接执行：  git push \u0026ndash;set-upstream origin newBranch\n 5. 切换回本想要提交代码的分区,把newBranch合并到 master分支上：  git checkout master\ngit merge newBranch\n 6. 删除新分区：  git branch -D newBranch\n 7. 重新提交一下代码：  git push\n ","permalink":"https://xiaotuanzijiang.github.io/posts/git%E9%97%AE%E9%A2%98/","summary":"1. 创建一个新的分支：  git branch newBranch\n 2. 查看分支是否创建成功：  git branch\n 3. 切换到新分区：  git checkout newBranch\n 4. 把代码直接提到newBranch分支上,如果出现提示,直接执行：  git push \u0026ndash;set-upstream origin newBranch\n 5. 切换回本想要提交代码的分区,把newBranch合并到 master分支上：  git checkout master\ngit merge newBranch\n 6. 删除新分区：  git branch -D newBranch\n 7. 重新提交一下代码：  git push\n ","title":"Git提交代码时出现Everything up-to-date"},{"content":"前端 - Color - CSSLayout - CSSGridGenerator - Uigradients - FreeDownloads 后端 - Binary Tree - BinaryTreeVisuakuser - Data Structure Visualizations - MvnRepository - MavenRepository - 阿里巴巴开源镜像站 其他 - MarkDown编辑器 - Eclipse主题 - Pexels - CodeLf - Favicon - RegexLearn ","permalink":"https://xiaotuanzijiang.github.io/posts/unitl/","summary":"前端 - Color - CSSLayout - CSSGridGenerator - Uigradients - FreeDownloads 后端 - Binary Tree - BinaryTreeVisuakuser - Data Structure Visualizations - MvnRepository - MavenRepository - 阿里巴巴开源镜像站 其他 - MarkDown编辑器 - Eclipse主题 - Pexels - CodeLf - Favicon - RegexLearn ","title":"UNTIL"},{"content":"\r\r.mac {\rwidth:10px;\rheight:10px;\rborder-radius:5px;\rfloat:left;\rmargin:10px 0 0 5px;\r}\r.b1 {\rbackground:#E0443E;\rmargin-left: 10px;\r}\r.b2 { background:#DEA123; }\r.b3 { background:#1AAB29; }\r.warpper{\rbackground:#121212;\rborder-radius:5px;\rwidth:400px;\r}\r\r\r\r\r\r\r#include\u0026lt;iostream\u0026gt;using namespace std; int main(){ return 0; } # LeetCode_每日一题 ### [2.14-540. 有序数组中的单一元素](https://leetcode-cn.com/problems/single-element-in-a-sorted-array/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;二分 class Solution { public int singleNonDuplicate(int[] nums) { int n = nums.length; int l = 0,r = n - 1; while(l \u0026lt; r){ int mid = (l + r) \u0026gt;\u0026gt; 1; if((mid \u0026amp; 1) == 0){ if (mid + 1 \u0026lt; n \u0026amp;\u0026amp; nums[mid] == nums[mid + 1]) l = mid + 1; else r = mid; }else{ if (mid - 1 \u0026gt;= 0 \u0026amp;\u0026amp; nums[mid - 1] == nums[mid]) l = mid + 1; else r = mid; } } return nums[r]; } } ### [2.11-1984. 学生分数的最小差值](https://leetcode-cn.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;排序+动态窗口 class Solution { public int minimumDifference(int[] nums, int k) { Arrays.sort(nums); int ans = Integer.MAX_VALUE; for (int i = 0; i \u0026lt;= nums.length - k; i++) { ans = Math.min(ans, nums[i + k - 1] - nums[i]); } return ans; } } ### [2.4-1725. 可以形成最大正方形的矩形数目](https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;模拟 class Solution { public int countGoodRectangles(int[][] rectangles) { int max = 0, ans = 0; for (int[] r : rectangles) { int cur = Math.min(r[0], r[1]); if (cur == max) ans++; else if (cur \u0026gt; max) { max = cur; ans = 1; } } return ans; } } ### [2.2-2000. 反转单词前缀](https://leetcode-cn.com/problems/reverse-prefix-of-word/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;模拟 class Solution { public String reversePrefix(String word, char ch) { StringBuilder sb = new StringBuilder(); char[] cs = word.toCharArray(); boolean isone = true; for (int i = 0; i \u0026lt; cs.length; i++) { sb.append(cs[i]); if(cs[i] == ch \u0026amp;\u0026amp; isone){ isone = false; sb.reverse(); } } return sb.toString(); } } ### [1.31-1342. 将数字变成 0 的操作次数](https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;模拟 class Solution { public int numberOfSteps(int num) { int con = 0; while (num != 0) { num = (num \u0026amp; 1) == 0 ? num \u0026gt;\u0026gt; 1 : num - 1; con++; } return con; } } ### [1.30-884. 两句话中的不常见单词](https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;HashMap class Solution { public String[] uncommonFromSentences(String s1, String s2) { Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); count(s1, map); count(s2, map); List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); map.forEach((k, v) -\u0026gt; { if (v == 1) { list.add(k); } }); return list.toArray(new String[list.size()]); } private void count(String s, Map\u0026lt;String, Integer\u0026gt; map) { for (String a : s.split(\u0026#34; \u0026#34;)) { map.put(a, map.getOrDefault(a, 0) + 1); } } } ### [1.28-1996. 游戏中弱角色的数量](https://leetcode-cn.com/problems/the-number-of-weak-characters-in-the-game/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;排序 class Solution { public int numberOfWeakCharacters(int[][] properties) { Arrays.sort(properties,(a,b)-\u0026gt;{ return a[0] == b[0] ? (a[1] - b[1]) : (b[0] - a[0]); }); int cnt = 0; int temp = 0; for (int[] p : properties) { if(p[1] \u0026lt; temp) cnt++; else temp = p[1]; } return cnt; } } ### [1.27-2047. 句子中的有效单词数](https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;模拟 class Solution { public int countValidWords(String sentence) { String[] ss = sentence.split(\u0026#34; \u0026#34;); int ans = 0; for (String s : ss) if (check(s)) ans++; return ans; } boolean check(String s) { int n = s.length(); if (n == 0) return false; for (int i = 0, c1 = 0, c2 = 0; i \u0026lt; n; i++) { char c = s.charAt(i); if (Character.isDigit(c)) return false; if (c == \u0026#39; \u0026#39;) return false; if (c == \u0026#39;-\u0026#39; \u0026amp;\u0026amp; ++c1 \u0026gt;= 0) { if (c1 \u0026gt; 1 || (i == 0 || i == n - 1)) return false; if (!Character.isLetter(s.charAt(i - 1)) || !Character.isLetter(s.charAt(i + 1))) return false; } if ((c == \u0026#39;!\u0026#39; || c == \u0026#39;.\u0026#39; || c == \u0026#39;,\u0026#39;) \u0026amp;\u0026amp; ++c2 \u0026gt;= 0) { if (c2 \u0026gt; 1 || (i != n - 1)) return false; } } return true; } } ### [1.25-1688. 比赛中的配对次数](https://leetcode-cn.com/problems/count-of-matches-in-tournament/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;脑筋急转弯 class Solution { public int numberOfMatches(int n) { return n - 1; } } ### [1.22-1332. 删除回文子序列](https://leetcode-cn.com/problems/remove-palindromic-subsequences) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;模拟 class Solution { public int removePalindromeSub(String s) { int n = s.length(); for(int i = 0; i \u0026lt; (n \u0026gt;\u0026gt; 1); i++) if(s.charAt(i) != s.charAt(n-1-i)) return 2; return 1; } } ### [1.19-219.存在重复元素II](https://leetcode-cn.com/problems/contains-duplicate-ii) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;HashMap class Solution { public boolean containsNearbyDuplicate(int[] nums, int k) { HashMap\u0026lt;Integer, Integer\u0026gt; hashMap = new HashMap\u0026lt;\u0026gt;(); for(int i = 0; i \u0026lt; nums.length; i++) { int num = nums[i]; if(hashMap.containsKey(num)) { return true; } hashMap.put(num, null); if(hashMap.size() \u0026gt; k) { hashMap.remove(nums[i - k]); } } return false; } } # LeetCode_周赛 ## 第 276 场周赛 ### [2138. 将字符串拆分为若干长度为 k 的组](https://leetcode-cn.com/problems/divide-a-string-into-groups-of-size-k/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;补全分割 class Solution { public String[] divideString(String s, int k, char fill) { int num = s.length() % k; if(num != 0) { num = k - num; while(num-- \u0026gt; 0) { s += fill; } } int len = s.length() / k; String[] ans = new String[len]; for(int i = 0; i \u0026lt; len; i++) { ans[i] = s.substring(i*k, (i + 1) * k); } return ans; } } ### [2139. 得到目标值的最少行动次数](https://leetcode-cn.com/problems/divide-a-string-into-groups-of-size-k/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;贪心 class Solution { public int minMoves(int target, int maxDoubles) { int cnt = 0; while(target \u0026gt; 1) { if(maxDoubles \u0026gt; 0) { if((target \u0026amp; 1) == 1) target--; else { target \u0026gt;\u0026gt;= 1; maxDoubles--; } cnt++; }else { return target + cnt - 1; } } return cnt; } } ### [2140. 解决智力问题](https://leetcode-cn.com/problems/solving-questions-with-brainpower/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;逆序dp class Solution { public long mostPoints(int[][] questions) { int n = questions.length; long[] dp = new long[n + 1]; for(int i = n -1; i \u0026gt;= 0; i--) { if(questions[i][1] + i + 1 \u0026lt; n) { dp[i] = Math.max(dp[i + 1], dp[questions[i][1] + i + 1] + questions[i][0]); } else { dp[i] = Math.max(dp[i + 1], questions[i][0]); } } return dp[0]; } } ## 第 275 场周赛 ### [2133. 检查是否每一行每一列都包含全部整数](https://leetcode-cn.com/problems/check-if-every-row-and-column-contains-all-numbers/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;HashSet class Solution { public boolean checkValid(int[][] matrix) { int len = matrix.length; HashSet\u0026lt;Integer\u0026gt; h1 = new HashSet\u0026lt;\u0026gt;(); HashSet\u0026lt;Integer\u0026gt; h2 = new HashSet\u0026lt;\u0026gt;(); for(int i = 0; i \u0026lt; len; i++) { for(int j = 0; j \u0026lt; len; j++) { h1.add(matrix[i][j]); h2.add(matrix[j][i]); } if(h1.size() != len || h2.size() != len) return false; h1.clear(); h2.clear(); } return true; } }\t## 第 69 场双周赛 ### [2129. 将标题首字母大写](https://leetcode-cn.com/problems/capitalize-the-title/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;Api+Ascii class Solution { public String capitalizeTitle(String title) { String[] str = title.split(\u0026#34; \u0026#34;); for(int i = 0; i \u0026lt; str.length; i++) { if(str[i].length() \u0026lt; 3) { str[i] = str[i].toLowerCase(); } else { char[] c = str[i].toLowerCase().toCharArray(); c[0] \u0026amp;= ~32; str[i] = String.valueOf(c); } } return String.join(\u0026#34; \u0026#34;, str); } } ### [2130. 链表最大孪生和](https://leetcode-cn.com/problems/maximum-twin-sum-of-a-linked-list/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;链表转数组+双指针 class Solution { public int pairSum(ListNode head) { if(head.next == null) return 0; List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); while(head != null) { list.add(head.val); head = head.next; } Integer[] num = list.toArray(new Integer[0]); int mid = num.length \u0026gt;\u0026gt; 1; int max = 0; for(int i = mid - 1; i \u0026gt;= 0; i--){ max = Math.max(max, num[i] + num[mid++]); } return max; } } ## 第 274 场周赛 ### [2124. 检查是否所有 A 都在 B 之前](https://leetcode-cn.com/problems/check-if-all-as-appears-before-all-bs/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;标记 class Solution { public boolean checkString(String s) { char[] cs = s.toCharArray(); boolean na = false; for(char c : cs) { if(c == \u0026#39;a\u0026#39; \u0026amp;\u0026amp; na) return false; if(c != \u0026#39;a\u0026#39;) na = true; } return true; } } ### [2125. 银行中的激光束数量](https://leetcode-cn.com/problems/number-of-laser-beams-in-a-bank/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;cnt * pre class Solution { public int numberOfBeams(String[] bank) { int ans = 0; int pre = 0; for(String s : bank) { int cnt = 0; char[] cs = s.toCharArray(); for(int i = 0; i \u0026lt; cs.length; i++) { cnt += cs[i] == \u0026#39;1\u0026#39; ? 1 : 0; } if(cnt != 0) { ans += cnt * pre; pre = cnt; } } return ans; } } ### [2126. 摧毁小行星](https://leetcode-cn.com/problems/destroying-asteroids/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;排序+贪心 class Solution { public boolean asteroidsDestroyed(int mass, int[] asteroids) { long mas = mass; Arrays.sort(asteroids); for(int i : asteroids) { if(mas \u0026lt; i) return false; mas += i; } return true; } } ## 第 273 场周赛 ### [2119. 反转两次的数字](https://leetcode-cn.com/problems/a-number-after-a-double-reversal/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;末尾不为0 class Solution { public boolean isSameAfterReversals(int num) { return !(num != 0 \u0026amp;\u0026amp; num % 10 == 0); } } # LeetCode_Other ### [169. 多数元素](https://leetcode-cn.com/problems/majority-element/) 难度：\u0026lt;font color=#5AB726 \u0026gt;简单\u0026lt;/font\u0026gt; \u0026gt;脑筋急转弯 class Solution { public int majorityElement(int[] nums) { Arrays.sort(nums); return nums[nums.length \u0026gt;\u0026gt; 1]; } } \u0026gt;摩尔投票法 class Solution { public int majorityElement(int[] nums) { int cnt = 0; int temp = 0; for(int i : nums) { if(cnt == 0) { temp = i; cnt = 1; }else { cnt += temp != i ? -1 : 1; } } return temp; } }","permalink":"https://xiaotuanzijiang.github.io/posts/leetcode/","summary":".mac {\rwidth:10px;\rheight:10px;\rborder-radius:5px;\rfloat:left;\rmargin:10px 0 0 5px;\r}\r.b1 {\rbackground:#E0443E;\rmargin-left: 10px;\r}\r.b2 { background:#DEA123; }\r.b3 { background:#1AAB29; }\r.warpper{\rbackground:#121212;\rborder-radius:5px;\rwidth:400px;\r}\r\r\r\r\r\r\r#include\u0026lt;iostream\u0026gt;using namespace std; int main(){ return 0; } # LeetCode_每日一题 ### [2.14-540. 有序数组中的单一元素](https://leetcode-cn.com/problems/single-element-in-a-sorted-array/) 难度：\u0026lt;font color=#FFA119\u0026gt;中等\u0026lt;/font\u0026gt; \u0026gt;二分 class Solution { public int singleNonDuplicate(int[] nums) { int n = nums.length; int l = 0,r = n - 1; while(l \u0026lt; r){ int mid = (l + r) \u0026gt;\u0026gt; 1; if((mid \u0026amp; 1) == 0){ if (mid + 1 \u0026lt; n \u0026amp;\u0026amp; nums[mid] == nums[mid + 1]) l = mid + 1; else r = mid; }else{ if (mid - 1 \u0026gt;= 0 \u0026amp;\u0026amp; nums[mid - 1] == nums[mid]) l = mid + 1; else r = mid; } } return nums[r]; } } ### [2.","title":"LeetCode"}]