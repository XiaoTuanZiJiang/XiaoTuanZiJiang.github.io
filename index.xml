<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>XiaoTuanZiJiang</title>
    <link>https://xiaotuanzijiang.github.io/</link>
    <description>Recent content on XiaoTuanZiJiang</description>
    <image>
      <url>https://xiaotuanzijiang.github.io/papermod-cover.png</url>
      <link>https://xiaotuanzijiang.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 10 Jul 2022 22:07:12 +0800</lastBuildDate><atom:link href="https://xiaotuanzijiang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JAVA</title>
      <link>https://xiaotuanzijiang.github.io/posts/java/</link>
      <pubDate>Sun, 10 Jul 2022 22:07:12 +0800</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/java/</guid>
      <description>一、七种遍历Map的方法、  1、forEach+Map.EntrySet for (Map.Entry&amp;lt;Integer, String&amp;gt; entry : map.entrySet()) { System.out.println(entry.getKey() + entry.getValue()); } 2、iterator+Map.Entry Iterator&amp;lt;Map.Entry&amp;lt;Integer, String&amp;gt;&amp;gt; iterator = map.entrySet().iterator(); while (iterator.hasNext()) { Map.Entry&amp;lt;Integer, String&amp;gt; next = iterator.next(); System.out.println(next.getKey() + next.getValue()); } 3、keySet+forEach for (Integer key : map.keySet()) { System.out.println(key + map.get(key)); } 4、keySet+iterator Iterator&amp;lt;Integer&amp;gt; iterator = map.keySet().iterator(); while (iterator.hasNext()) { Integer next = iterator.next(); System.out.println(next + map.get(next)); } 5、entry+stream map.entrySet().stream().forEach(entry -&amp;gt; System.out.println(entry.getKey() + entry.getValue())); 6、stream并行 map.entrySet().stream().parallel().forEach(entry -&amp;gt; System.out.println(entry.getKey() + entry.</description>
    </item>
    
    <item>
      <title>Vue-Dplayer</title>
      <link>https://xiaotuanzijiang.github.io/posts/vue-dplayer/</link>
      <pubDate>Sat, 09 Jul 2022 14:50:50 +0800</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/vue-dplayer/</guid>
      <description>安装  使用npm:
npm install dplayer --save 快速入门  新建VideoView.vue文件
&amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div id=&amp;quot;dplayer&amp;quot; class=&amp;quot;play-root&amp;quot; &amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import DPlayer from &#39;dplayer&#39;; export default { name: &amp;quot;optimizeVideo&amp;quot;, data() { return { dp:null, } }, methods:{ onPlay() { this.dp.play() } }, mounted() { //请求后端获取视频播放地址 var src = &amp;quot;http://localhost:9090/&amp;quot; + this.$route.query.url const dp = new DPlayer({ // 配置参数 container: document.getElementById(&#39;dplayer&#39;), playbackSpeed: [0.5, 0.75, 1, 1.25, 1.5, 2, 3], //播放倍速 hotkey: true, //启用热键，支持FF，FR，音量控制，播放和暂停 autoplay: false, //视频自动播放 theme: &#39;#00BFFF&#39;, //主题颜色 loop: true, lang: &#39;zh-cn&#39;, //语言 preload: &#39;auto&#39;, // logo: &#39;logo.</description>
    </item>
    
    <item>
      <title>SpringBoot &#43; SpringData Jpa</title>
      <link>https://xiaotuanzijiang.github.io/posts/springboot/</link>
      <pubDate>Sun, 19 Jun 2022 22:29:57 +0800</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/springboot/</guid>
      <description>application.yml spring:datasource:driver-class-name:com.mysql.cj.jdbc.Driverurl:jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2b8username:rootpassword:rootjpa:database:mysqldatabase-platform:org.hibernate.dialect.MySQL5InnoDBDialectshow-sql:truehibernate:ddl-auto:updateUser.java package com.example.springbootvue.entity; import com.fasterxml.jackson.annotation.JsonIgnore; import lombok.Data; import org.springframework.data.annotation.CreatedDate; import javax.persistence.*; import java.time.LocalDateTime; @Data @Entity @Table(name = &amp;#34;sys_user&amp;#34;) public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Integer id; private String username; @JsonIgnore private String password; private String nickname; private String email; private String phone; private String address; @CreatedDate private LocalDateTime createTime; } UserRepository package com.example.springbootvue.repository; import com.example.springbootvue.entity.User; import org.springframework.data.domain.Pageable; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.JpaSpecificationExecutor; import java.util.List; public interface UserRepository extends JpaRepository&amp;lt;User, Integer&amp;gt;, JpaSpecificationExecutor&amp;lt;User&amp;gt; { List&amp;lt;User&amp;gt; findAllByUsernameContainingAndAddressContaining (String likeUsername, String likeAddress, Pageable Pageable); } findAllByUsernameContainingAndAddressContaining -&amp;gt; 根据Username And Address进行模糊查询</description>
    </item>
    
    <item>
      <title>LeetCode</title>
      <link>https://xiaotuanzijiang.github.io/posts/leetcode/</link>
      <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/leetcode/</guid>
      <description>LeetCode 7-28-1331. 数组序号转换 难度：简单
 HashMap
 func arrayRankTransform(arr []int) []int { arrcopy := make([]int, len(arr)) copy(arrcopy, arr) sort.Ints(arrcopy) arrmap := make(map[int]int, len(arrcopy)) i := 0 for _, n := range arrcopy{ i++ if _, ok := arrmap[n]; ok { i-- continue } arrmap[n] = i } for i, n := range arr { arr[i] = arrmap[n] } return arr } 7-24-1184. 公交站间的距离 难度：简单
 模拟
 func distanceBetweenBusStops(distance []int, start int, destination int) int { if start &amp;gt; destination { return distanceBetweenBusStops(distance, destination, start) } aSum := 0 bSum := 0 for i := 0; i &amp;lt; len(distance); i++ { if i &amp;gt;= start &amp;amp;&amp;amp; i &amp;lt; destination { aSum += distance[i] } else { bSum += distance[i] } } return int(math.</description>
    </item>
    
    <item>
      <title>Git Question</title>
      <link>https://xiaotuanzijiang.github.io/posts/git/</link>
      <pubDate>Wed, 25 May 2022 20:32:40 +0800</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/git/</guid>
      <description>Git提交代码时出现Everything up-to-date 2
1. 创建一个新的分支  git branch newBranch
 2. 查看分支是否创建成功：  git branch
 3. 切换到新分区：  git checkout newBranch
 4. 把代码直接提到newBranch分支上,如果出现提示,直接执行：  git push &amp;ndash;set-upstream origin newBranch
 5. 切换回本想要提交代码的分区,把newBranch合并到 master分支上：  git checkout master
git merge newBranch
 6. 删除新分区：  git branch -D newBranch
 7. 重新提交一下代码：  git push
  Git-error: failed to push some refs to 1.执行如下命令  git pull &amp;ndash;rebase origin master</description>
    </item>
    
    <item>
      <title>Redis面试题</title>
      <link>https://xiaotuanzijiang.github.io/posts/redis/</link>
      <pubDate>Tue, 15 Feb 2022 16:26:12 +0800</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/redis/</guid>
      <description>Redis基本数据类型，应用场景 Redis的数据结构有:
 字符串（String）：存储简单的数据，例如缓存某个简单的字符串、JSON格式的字符串、Redis分布式锁的实现、实现计数器、Session共享、分布式ID 哈希表（Hash）：存储一些key-value，适合用来存储对象 列表（List）：Redis的列表通过命令的组合，可当作栈或队列来使用，或是缓存一下消息数据流 集合（Set）：和列表类似，可存储多个不相同的元素，集合可以进行交集、并集、差集操作 有序集合（Sorted Set）：有序的Set 布隆过滤器（Bitmap） 坐标（GeoHash）：借助Sorted Set实现 HyperLogLog：统计不重复数据，用于大数据基数统计 Streams：内存版Kafka  常见的缓存淘汰算法  FIFO（First In First Out，先进先出），根据缓存被存储的时间，距离当前时间最远的数据优先被淘汰，类似于队列 LRU（Least Recently Used，最近最少使用）根据最近被使用的时间，距离当前时间最远的数据优先被淘汰 LFU（Least Frequently Used，最不经常使用），在一段时间内，缓存数据被使用次数最少的数据优先淘汰  Redis的持久化策略 RDB  Redis DataBase 将某一时刻的内存快照（Snapshot）以二进制的方式写入磁盘。
 手动触发:
 save命令：使Redis处于阻塞状态，知道RDB持久化完成，才会响应其他客户端请求，所以在生产环境中谨慎使用 bgsave命令：fork出一个子进程执行持久化，主线程只在fork过程中又短暂的阻塞，子线程创建完成后，主线程才会响应其他客户端请求  自动触发:
 save m n: 在m秒内，如果有n个键发生改变，则自动触发持久化，通过调用bgsave执行，如果设置多个，只要满足其中一个就会触发一次。配置文件中有默认配置（可以注释掉） flushall: 用于清空Redis所有的数据库，flushdb清空当前Redis所在数据库，会清空RDB文件，同时会生成dump.rdb文件，内容为空  优点
1、Redis数据库将只包含一个dump.rdb文件，方便持久化 2、容灾性好，方便备份
3、性能最大化：fork子进程完成写操作，主进程继续处理请求。IO最大化：使用单独子线程进行持久化，主线程不会进行任何IO操作，保证了Redis的高性能
4、相对于数据集大时，比AOF的启动效率更高
缺点
1、数据安全性低，持久化存在时间间隔，如果持久化之间Redis宕机，会发生数据丢失
2、由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果数据集较大时，可能会导致服务器停止服务时间过长。占用cpu资源
 AOF  Append Only File 以日志的形式记录服务器所处理过的每一个写、删除操作，以文本的方式记录，打开文件可以看到详细的操作记录、调用操作系统命令进程刷盘
 1、所有的写命令都会追加到AOF缓冲中
2、AOF缓冲区根据对应的策略向硬盘进行同步操作
3、AOF文件会越来越大，需要定期对AOF文件进行重写，达到压缩的目的
4、当Redis重启时，可以加载AOF文件进行数据恢复
同步策略:</description>
    </item>
    
    <item>
      <title>UNTIL</title>
      <link>https://xiaotuanzijiang.github.io/posts/unitl/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiaotuanzijiang.github.io/posts/unitl/</guid>
      <description>前端 - Color - CSSLayout - CSSGridGenerator - Uigradients - FreeDownloads 后端 - Binary Tree - BinaryTreeVisuakuser - Data Structure Visualizations - MvnRepository - MavenRepository - 阿里巴巴开源镜像站 其他 - MarkDown编辑器 - Eclipse主题 - Pexels - CodeLf - Favicon - RegexLearn  </description>
    </item>
    
    
    
  </channel>
</rss>
